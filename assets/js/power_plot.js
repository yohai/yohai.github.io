function genPoints(t,a,e,n){const l=[],c=[];for(let c=-t;c<=t;c+=n)for(let t=-a;t<=a;t+=e)l.push([c,t]);for(let l=-t;l<=t;l+=e)for(let t=-a;t<=a;t+=n)c.push([l,t]);return{hlines:l,vlines:c}}function f(t,a,e){const n=e*Math.PI/180,l=t.map(([t,a])=>Math.sqrt(t*t+a*a)),c=t.map(([t,a])=>Math.atan2(a,t)).map(t=>n<0&&t<n?t+2*Math.PI:n>=0&&t>n?t-2*Math.PI:t),r=l.map(t=>Math.pow(t,a)),s=c.map(t=>t*a);return t.map((t,a)=>[r[a]*Math.cos(s[a]),r[a]*Math.sin(s[a])])}function applyFunc(t,a,e){return f(t,a,e)}function drawBranchCut(t,a){svg.selectAll(".branch-cut").remove();const e=a*Math.PI/180;let n=10*Math.cos(e*t),l=10*Math.sin(e*t);svg.append("line").attr("class","branch-cut").attr("x1",xScale(0)).attr("y1",yScale(0)).attr("x2",xScale(n)).attr("y2",yScale(l)).attr("stroke","gray").attr("stroke-width",2),e>0?(n=10*Math.cos((e-2*Math.PI)*t),l=10*Math.sin((e-2*Math.PI)*t)):(n=10*Math.cos((e+2*Math.PI)*t),l=10*Math.sin((e+2*Math.PI)*t)),svg.append("line").attr("class","branch-cut").attr("x1",xScale(0)).attr("y1",yScale(0)).attr("x2",xScale(n)).attr("y2",yScale(l)).attr("stroke","gray").attr("stroke-width",2),n=10*Math.cos(e),l=10*Math.sin(e),svg.append("line").attr("class","branch-cut").attr("x1",xScale(0)).attr("y1",yScale(0)).attr("x2",xScale(n)).attr("y2",yScale(l)).attr("stroke","black").attr("stroke-width",4)}function drawPoints(t,a){svg.selectAll(`.point-${a}`).data(t).join("circle").attr("class",`point-${a}`).attr("cx",t=>xScale(t[0])).attr("cy",t=>yScale(t[1])).attr("r",1.5).attr("fill",a)}function update(t,a){const e=applyFunc(hlines,t,a),n=applyFunc(vlines,t,a);drawPoints(e,"blue"),drawPoints(n,"red"),drawBranchCut(t,a)}function handleInput(){const t=+alphaInput.node().value,a=+branchAngleInput.node().value;alphaValue.text(t.toFixed(1)),branchAngleValue.text(a),update(t,a)}const width=600,height=600,W=3,H=3,coarse=.5,fine=.03,defaultAlpha=1,defaultBranchAngle=180,xScale=d3.scaleLinear().domain([-4.5,4.5]).range([0,width]),yScale=d3.scaleLinear().domain([-4.5,4.5]).range([height,0]),svg=d3.select("#powerchart");svg.append("g").attr("transform",`translate(0,${height/2})`).call(d3.axisBottom(xScale).tickValues([-4,-3,-2,-1,1,2,3,4])).attr("stroke-width",2).selectAll("text").style("font-size","20px"),svg.append("g").attr("transform",`translate(${width/2},0)`).call(d3.axisLeft(yScale).tickValues([-4,-3,-2,-1,1,2,3,4])).attr("stroke-width",2).selectAll("text").style("font-size","20px");const{hlines:hlines,vlines:vlines}=genPoints(W,H,coarse,fine);update(defaultAlpha,defaultBranchAngle);const alphaInput=d3.select("#alpha"),alphaValue=d3.select("#alphaValue"),branchAngleInput=d3.select("#branchAngle"),branchAngleValue=d3.select("#branchAngleValue"),restoreButton=d3.select("#restoreDefaults");d3.select("#resetAlpha").on("click",()=>{alphaInput.node().value=defaultAlpha,alphaValue.text(defaultAlpha.toFixed(1)),handleInput()}),d3.select("#resetBranchcut").on("click",()=>{branchAngleInput.node().value=defaultBranchAngle,branchAngleValue.text(defaultBranchAngle),handleInput()}),alphaInput.on("input",handleInput),branchAngleInput.on("input",handleInput);