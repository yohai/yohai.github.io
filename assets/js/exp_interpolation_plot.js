function genLinesExp(){const t=[],e=[],a=Math.PI/10;for(let e=-Math.PI;e<=Math.PI;e+=a){const a=[];for(let t=-Math.PI;t<=Math.PI;t+=fine)a.push([t,e]);t.push(a)}for(let t=-Math.PI;t<=Math.PI;t+=a){const a=[];for(let e=-Math.PI;e<=Math.PI;e+=fine)a.push([t,e]);e.push(a)}return{hlinesExp:t,vlinesExp:e}}function fexp(t,e){return t.map(t=>[e*Math.exp(t[0])*Math.cos(t[1])+(1-e)*t[0],e*Math.exp(t[0])*Math.sin(t[1])+(1-e)*t[1]])}function updateExp(t){const e=hlinesExp.map(e=>fexp(e,t)),a=vlinesExp.map(e=>fexp(e,t));drawLines(e,"blue"),drawLines(a,"red"),svgExp.selectAll("g").raise()}function drawLines(t,e){const a=d3.line().x(t=>xScale(t[0])).y(t=>yScale(t[1]));svgExp.selectAll(`.line-${e}`).data(t).join("path").attr("class",`line-${e}`).attr("d",a).attr("fill","none").attr("stroke",e).attr("stroke-width",1)}function handleInputExp(){const t=+tInput.node().value;tValue.text(t.toFixed(1)),updateExp(t)}const xScaleExp=d3.scaleLinear().domain([-4.5,4.5]).range([0,width]),yScaleExp=d3.scaleLinear().domain([-4.5,4.5]).range([height,0]),svgExp=d3.select("#expchart");svgExp.append("g").attr("transform",`translate(0,${height/2})`).call(d3.axisBottom(xScaleExp).tickValues([-Math.PI,Math.PI]).tickFormat(t=>t===-Math.PI?"-\u03c0":t===Math.PI?"\u03c0":t)).attr("stroke-width",2).selectAll("text").style("font-size","20px"),svgExp.append("g").attr("transform",`translate(${width/2},0)`).call(d3.axisLeft(yScaleExp).tickValues([-Math.PI,Math.PI]).tickFormat(t=>t===-Math.PI?"-\u03c0":t===Math.PI?"\u03c0":t)).attr("stroke-width",2).selectAll("text").style("font-size","20px");const{hlinesExp:hlinesExp,vlinesExp:vlinesExp}=genLinesExp();updateExp(0);const tInput=d3.select("#t"),tValue=d3.select("#tValue");tInput.on("input",handleInputExp);