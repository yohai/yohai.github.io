function resizeCanvas(e){const a=e.canvas.getBoundingClientRect();e.canvas.width=a.width,e.canvas.height=a.height,e.center={x:a.width/2,y:a.height/2},e.scale=e.canvas.width/e.logicalWidth,e.toCanvasCoords=(a=>({x:e.center.x+a.x*e.scale,y:e.center.y-a.y*e.scale})),e.fromCanvasCoords=(a=>({x:(a.x-e.center.x)/e.scale,y:(e.center.y-a.y)/e.scale}))}function drawPoint(e,a,t){const n=e.toCanvasCoords(a),s=e.ctx;s.beginPath(),s.arc(n.x,n.y,radius,0,2*Math.PI),s.fillStyle=t,s.fill()}function expMap(e){const a=Math.exp(e.x);return{x:a*Math.cos(e.y),y:a*Math.sin(e.y)}}function liftAngle(e,a){const t=2*Math.PI;return e+t*Math.round((a-e)/t)}function logMap(e){const a=Math.sqrt(e.x**2+e.y**2),t=Math.atan2(e.y,e.x);if("branchcut"===canvasParams.canvas1.logMode)return{x:Math.log(a),y:t};if("multivalued"===canvasParams.canvas1.logMode){const e=liftAngle(t,z.y);return{x:Math.log(a),y:e}}}function redraw(){Object.values(canvasParams).forEach(e=>resizeCanvas(e)),drawGrid(canvasParams.canvas1),"polar"===canvasParams.canvas2.gridMode?drawPolarGrid(canvasParams.canvas2):drawGrid(canvasParams.canvas2),drawPoint(canvasParams.canvas1,z,"red"),drawPoint(canvasParams.canvas2,expMap(z),"blue")}function isPointInCanvas(e,a,t){const n=e.toCanvasCoords(a()),s=t.x-n.x,c=t.y-n.y;return s*s+c*c<=radius*radius}function setupDragging(e,a,t){function n(e){const a=s.getBoundingClientRect();return{x:e.clientX-a.left,y:e.clientY-a.top}}const s=e.canvas;let c=!1;s.addEventListener("mousedown",t=>{const s=n(t);isPointInCanvas(e,a,s)&&(c=!0)}),s.addEventListener("mousemove",a=>{if(!c)return;const s=n(a),o=e.fromCanvasCoords(s);t(o),redraw()}),s.addEventListener("mouseup",()=>c=!1),s.addEventListener("mouseleave",()=>c=!1),s.addEventListener("click",a=>{const s=n(a),c=e.fromCanvasCoords(s);t(c),redraw()}),s.addEventListener("touchstart",t=>{const s=n(t.touches[0]);isPointInCanvas(e,a,s)&&(c=!0)}),s.addEventListener("touchmove",a=>{if(!c)return;const s=n(a.touches[0]),o=e.fromCanvasCoords(s);t(o),redraw()}),s.addEventListener("touchend",()=>c=!1)}function drawGrid(e){const a=e.ctx;a.clearRect(0,0,e.canvas.width,e.canvas.height),a.save(),a.strokeStyle="#aaa",a.lineWidth=1,a.beginPath();for(let t=0;t<e.ticks.length;t++){const n=e.center.x+e.ticks[t]*e.scale;a.moveTo(n,0),a.lineTo(n,e.canvas.height);const s=e.center.y-e.ticks[t]*e.scale;a.moveTo(0,s),a.lineTo(e.canvas.width,s)}a.stroke(),a.strokeStyle="#000",a.lineWidth=2,a.beginPath(),a.moveTo(0,e.center.y),a.lineTo(e.canvas.width,e.center.y),a.moveTo(e.center.x,0),a.lineTo(e.center.x,e.canvas.height),a.stroke(),drawTicks(e,a),a.restore()}function drawPolarGrid(e){const a=e.ctx;a.clearRect(0,0,e.canvas.width,e.canvas.height),a.save(),a.strokeStyle="#aaa",a.lineWidth=1;const t=e.logicalWidth/1.414,n=3;for(let s=n;s<t;s+=n)a.beginPath(),a.arc(e.center.x,e.center.y,s*e.scale,0,2*Math.PI),a.stroke();for(let n=0;n<360;n+=30){const s=n*Math.PI/180,c=e.center.x+Math.cos(s)*t*e.scale,o=e.center.y-Math.sin(s)*t*e.scale;a.beginPath(),a.moveTo(e.center.x,e.center.y),a.lineTo(c,o),a.stroke()}a.strokeStyle="#000",a.lineWidth=2,a.beginPath(),a.moveTo(0,e.center.y),a.lineTo(e.canvas.width,e.center.y),a.moveTo(e.center.x,0),a.lineTo(e.center.x,e.canvas.height),a.stroke(),drawTicks(e,a),a.textAlign="left",a.textBaseline="middle";for(let t=0;t<e.ticks.length;t++){const n=e.center.y-e.ticks[t]*e.scale;Math.abs(e.ticks[t])<1e-6||a.fillText(e.labels[t],e.center.x+8,n)}a.restore()}function drawTicks(e,a){a.strokeStyle="#000",a.lineWidth=1.5,a.beginPath();for(let t=0;t<e.ticks.length;t++){const n=e.center.x+e.ticks[t]*e.scale;a.moveTo(n,e.center.y-5),a.lineTo(n,e.center.y+5);const s=e.center.y-e.ticks[t]*e.scale;a.moveTo(e.center.x-5,s),a.lineTo(e.center.x+5,s)}a.stroke(),a.fillStyle="black",a.font="12px Arial",a.textAlign="center",a.textBaseline="top";for(let t=0;t<e.ticks.length;t++){const n=e.center.x+e.ticks[t]*e.scale;Math.abs(e.ticks[t])<1e-6||a.fillText(e.labels[t],n,e.center.y+8)}a.textAlign="left",a.textBaseline="middle";for(let t=0;t<e.ticks.length;t++){const n=e.center.y-e.ticks[t]*e.scale;Math.abs(e.ticks[t])<1e-6||a.fillText(e.labels[t],e.center.x+8,n)}}const canvas1=document.getElementById("canvas1"),canvas2=document.getElementById("canvas2"),radius=8.5,canvasParams={canvas1:{canvas:canvas1,ctx:canvas1.getContext("2d"),ticks:[-2*Math.PI,-Math.PI,0,Math.PI,2*Math.PI],labels:["-2\u03c0","-\u03c0","0","\u03c0","2\u03c0"],center:{x:0,y:0},toCanvasCoords:null,fromCanvasCoords:null,logMode:"branchcut",logicalWidth:4.2*Math.PI},canvas2:{canvas:canvas2,ctx:canvas2.getContext("2d"),ticks:[-15,-12,-9,-6,-3,0,3,6,9,12,15],labels:[-15,-12,-9,-6,-3,0,3,6,9,12,15].map(e=>e.toString()),center:{x:0,y:0},toCanvasCoords:null,fromCanvasCoords:null,gridMode:"cartesian",logicalWidth:33}};let z={x:1.791,y:0};setupDragging(canvasParams.canvas1,()=>z,e=>z=e),setupDragging(canvasParams.canvas2,()=>expMap(z),e=>z=logMap(e)),window.addEventListener("resize",redraw),document.querySelectorAll('input[name="gridMode"]').forEach(e=>{e.addEventListener("change",e=>{canvasParams.canvas2.gridMode=e.target.value,redraw()})}),document.querySelectorAll('input[name="logMode"]').forEach(e=>{e.addEventListener("change",e=>{canvasParams.canvas1.logMode=e.target.value})}),redraw(),document.querySelectorAll(".radio-buttons label").forEach(e=>{e.addEventListener("mousedown",e=>e.stopPropagation(),!0),e.addEventListener("mouseup",e=>e.stopPropagation(),!0),e.addEventListener("mousemove",e=>e.stopPropagation(),!0)});