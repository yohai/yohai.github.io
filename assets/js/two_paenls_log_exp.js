function resizeCanvas(a){const e=a.canvas.getBoundingClientRect();a.canvas.width=e.width,a.canvas.height=e.height,a.center={x:e.width/2,y:e.height/2},a.scale=a.canvas.width/a.logicalWidth,a.toCanvasCoords=(e=>({x:a.center.x+e.x*a.scale,y:a.center.y-e.y*a.scale})),a.fromCanvasCoords=(e=>({x:(e.x-a.center.x)/a.scale,y:(a.center.y-e.y)/a.scale}))}function drawPoint(a,e,t){const n=a.toCanvasCoords(e),s=a.ctx;s.beginPath(),s.arc(n.x,n.y,radius,0,2*Math.PI),s.fillStyle=t,s.fill()}function drawBranchCut(){const a=canvasParams.canvas2.ctx;a.strokeStyle="#008F00",a.lineWidth=6,a.setLineDash([15,3]),a.beginPath();const e=canvasParams.canvas2.toCanvasCoords({x:0,y:0}),t=branchAngles[canvasParams.thetaRange],n=canvasParams.canvas2.toCanvasCoords({x:Math.cos(t)*canvasParams.canvas2.logicalWidth*2,y:Math.sin(t)*canvasParams.canvas2.logicalWidth*2});a.moveTo(e.x,e.y),a.lineTo(n.x,n.y),a.stroke();const s=canvasParams.canvas2.logicalWidth,c=canvasParams.canvas1.ctx;c.fillStyle="#008F0022",c.strokeStyle="#008F00",c.setLineDash([12,3]),c.lineWidth=1;const r=canvasParams.canvas1.toCanvasCoords,o=r({x:-s/2,y:t}),i=r({x:s/2,y:t+2*Math.PI});c.fillRect(o.x,o.y,i.x-o.x,i.y-o.y),c.strokeRect(o.x,o.y,i.x-o.x,i.y-o.y)}function expMap(a){const e=Math.exp(a.x);return{x:e*Math.cos(a.y),y:e*Math.sin(a.y)}}function liftAngle(a,e){const t=2*Math.PI;return a+t*Math.round((e-a)/t)}function logMap(a){const e=Math.sqrt(a.x**2+a.y**2);let t=Math.atan2(a.y,a.x);switch(canvasParams.thetaRange){case"mpi_pi":break;case"mpi1_pi1":t<1-Math.PI&&(t+=2*Math.PI);break;case"zero_2pi":t<0&&(t+=2*Math.PI)}if("branchcut"===canvasParams.logMode)return{x:Math.log(e),y:t};if("multivalued"===canvasParams.logMode){const a=liftAngle(t,z.y);return{x:Math.log(e),y:a}}}function redraw(){resizeCanvas(canvasParams.canvas1),resizeCanvas(canvasParams.canvas2),drawGrid(canvasParams.canvas1),"polar"===canvasParams.gridMode?drawPolarGrid(canvasParams.canvas2):drawGrid(canvasParams.canvas2),"branchcut"===canvasParams.logMode&&drawBranchCut(),drawPoint(canvasParams.canvas1,z,"red"),drawPoint(canvasParams.canvas2,expMap(z),"blue")}function isPointInCanvas(a,e,t){const n=a.toCanvasCoords(e()),s=t.x-n.x,c=t.y-n.y;return s*s+c*c<=radius*radius}function setupDragging(a,e,t){function n(a){const e=s.getBoundingClientRect();return{x:a.clientX-e.left,y:a.clientY-e.top}}const s=a.canvas;let c=!1;s.addEventListener("mousedown",a=>{n(a);c=!0}),s.addEventListener("mousemove",e=>{if(!c)return;const s=n(e),r=a.fromCanvasCoords(s);t(r),redraw()}),s.addEventListener("mouseup",()=>c=!1),s.addEventListener("mouseleave",()=>c=!1),s.addEventListener("click",e=>{const s=n(e),c=a.fromCanvasCoords(s);t(c),redraw()}),s.addEventListener("touchstart",a=>{a.preventDefault(),c=!0}),s.addEventListener("touchmove",e=>{if(!c)return;const s=n(e.touches[0]),r=a.fromCanvasCoords(s);t(r),redraw()}),s.addEventListener("touchend",()=>c=!1),s.addEventListener("touchcancel",()=>c=!1)}function drawGrid(a){const e=a.ctx;e.clearRect(0,0,a.canvas.width,a.canvas.height),e.save(),e.strokeStyle="#aaa",e.lineWidth=1,e.beginPath();for(let t=0;t<a.ticks.length;t++){const n=a.center.x+a.ticks[t]*a.scale;e.moveTo(n,0),e.lineTo(n,a.canvas.height);const s=a.center.y-a.ticks[t]*a.scale;e.moveTo(0,s),e.lineTo(a.canvas.width,s)}e.stroke(),e.strokeStyle="#000",e.lineWidth=2,e.beginPath(),e.moveTo(0,a.center.y),e.lineTo(a.canvas.width,a.center.y),e.moveTo(a.center.x,0),e.lineTo(a.center.x,a.canvas.height),e.stroke(),drawTicks(a,e),e.restore()}function drawPolarGrid(a){const e=a.ctx;e.clearRect(0,0,a.canvas.width,a.canvas.height),e.save(),e.strokeStyle="#aaa",e.lineWidth=1;const t=a.logicalWidth/1.414,n=3;for(let s=n;s<t;s+=n)e.beginPath(),e.arc(a.center.x,a.center.y,s*a.scale,0,2*Math.PI),e.stroke();for(let n=0;n<360;n+=30){const s=n*Math.PI/180,c=a.center.x+Math.cos(s)*t*a.scale,r=a.center.y-Math.sin(s)*t*a.scale;e.beginPath(),e.moveTo(a.center.x,a.center.y),e.lineTo(c,r),e.stroke()}e.strokeStyle="#000",e.lineWidth=2,e.beginPath(),e.moveTo(0,a.center.y),e.lineTo(a.canvas.width,a.center.y),e.moveTo(a.center.x,0),e.lineTo(a.center.x,a.canvas.height),e.stroke(),drawTicks(a,e),e.textAlign="left",e.textBaseline="middle";for(let t=0;t<a.ticks.length;t++){const n=a.center.y-a.ticks[t]*a.scale;Math.abs(a.ticks[t])<1e-6||e.fillText(a.labels[t],a.center.x+8,n)}e.restore()}function drawTicks(a,e){e.strokeStyle="#000",e.lineWidth=1.5,e.beginPath();for(let t=0;t<a.ticks.length;t++){const n=a.center.x+a.ticks[t]*a.scale;e.moveTo(n,a.center.y-5),e.lineTo(n,a.center.y+5);const s=a.center.y-a.ticks[t]*a.scale;e.moveTo(a.center.x-5,s),e.lineTo(a.center.x+5,s)}e.stroke(),e.fillStyle="black",e.font="12px Arial",e.textAlign="center",e.textBaseline="top";for(let t=0;t<a.ticks.length;t++){const n=a.center.x+a.ticks[t]*a.scale;Math.abs(a.ticks[t])<1e-6||e.fillText(a.labels[t],n,a.center.y+8)}e.textAlign="left",e.textBaseline="middle";for(let t=0;t<a.ticks.length;t++){const n=a.center.y-a.ticks[t]*a.scale;Math.abs(a.ticks[t])<1e-6||e.fillText(a.labels[t],a.center.x+8,n)}}const canvas1=document.getElementById("canvas1"),canvas2=document.getElementById("canvas2"),branchAngles={mpi_pi:-Math.PI,mpi1_pi1:1-Math.PI,zero_2pi:0},radius=8.5,canvasParams={canvas1:{canvas:canvas1,ctx:canvas1.getContext("2d"),ticks:[-2*Math.PI,-Math.PI,0,Math.PI,2*Math.PI],labels:["-2\u03c0","-\u03c0","0","\u03c0","2\u03c0"],center:{x:0,y:0},toCanvasCoords:null,fromCanvasCoords:null,logicalWidth:4.2*Math.PI},canvas2:{canvas:canvas2,ctx:canvas2.getContext("2d"),ticks:[-15,-12,-9,-6,-3,0,3,6,9,12,15],labels:[-15,-12,-9,-6,-3,0,3,6,9,12,15].map(a=>a.toString()),center:{x:0,y:0},toCanvasCoords:null,fromCanvasCoords:null,logicalWidth:33},gridMode:"cartesian",logMode:"branchcut",thetaRange:"mpi_pi"};let z={x:1.791,y:0};setupDragging(canvasParams.canvas1,()=>z,a=>z=a),setupDragging(canvasParams.canvas2,()=>expMap(z),a=>z=logMap(a)),window.addEventListener("resize",redraw),document.querySelectorAll('input[name="gridMode"]').forEach(a=>{a.addEventListener("change",a=>{canvasParams.gridMode=a.target.value,redraw()})});const thetaGroup=document.getElementById("theta-group"),thetaInputs=thetaGroup.querySelectorAll("input"),thetaLabels=thetaGroup.querySelectorAll("label");document.querySelectorAll('input[name="thetaRange"]').forEach(a=>{a.addEventListener("change",a=>{canvasParams.thetaRange=a.target.value,redraw()})}),document.querySelectorAll('input[name="logMode"]').forEach(a=>{a.addEventListener("change",a=>{canvasParams.logMode=a.target.value,"multivalued"===canvasParams.logMode?(thetaInputs.forEach(a=>a.disabled=!0),thetaLabels.forEach(a=>{a.classList.remove("btn-outline-success"),a.classList.add("btn-outline-secondary","disabled")})):(thetaInputs.forEach(a=>a.disabled=!1),thetaLabels.forEach(a=>{a.classList.remove("btn-outline-secondary","disabled"),a.classList.add("btn-outline-success")})),redraw()})}),redraw();