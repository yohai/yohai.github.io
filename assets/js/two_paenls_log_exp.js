function resizeCanvas(e){const t=e.canvas.getBoundingClientRect();e.canvas.width=t.width,e.canvas.height=t.height,e.center={x:t.width/2,y:t.height/2},e.scale=e.canvas.width/e.logicalWidth,e.toCanvasCoords=(t=>({x:e.center.x+t.x*e.scale,y:e.center.y-t.y*e.scale})),e.fromCanvasCoords=(t=>({x:(t.x-e.center.x)/e.scale,y:(e.center.y-t.y)/e.scale}))}function drawGrid(e){const t=e.ctx;t.clearRect(0,0,e.canvas.width,e.canvas.height),t.save(),t.strokeStyle="#eee",t.lineWidth=1,t.beginPath();const a=-Math.ceil(e.center.x/e.scale),n=Math.ceil((e.canvas.width-e.center.x)/e.scale);for(let s=a;s<=n;s++){const a=e.center.x+s*e.scale;t.moveTo(a,0),t.lineTo(a,e.canvas.height)}const s=-Math.ceil(e.center.y/e.scale),c=Math.ceil((e.canvas.height-e.center.y)/e.scale);for(let a=s;a<=c;a++){const n=e.center.y+a*e.scale;t.moveTo(0,n),t.lineTo(e.canvas.width,n)}t.stroke(),t.strokeStyle="#000",t.lineWidth=2,t.beginPath(),t.moveTo(0,e.center.y),t.lineTo(e.canvas.width,e.center.y),t.moveTo(e.center.x,0),t.lineTo(e.center.x,e.canvas.height),t.stroke(),drawTicks(e,t),t.restore()}function drawPolarGrid(e){const t=e.ctx;t.clearRect(0,0,e.canvas.width,e.canvas.height),t.save(),t.strokeStyle="#eee",t.lineWidth=1;const a=Math.min(e.canvas.width,e.canvas.height)/1.141,n=e.scale;for(let s=n;s<a;s+=n)t.beginPath(),t.arc(e.center.x,e.center.y,s,0,2*Math.PI),t.stroke();for(let n=0;n<360;n+=30){const s=n*Math.PI/180,c=e.center.x+Math.cos(s)*a,r=e.center.y-Math.sin(s)*a;t.beginPath(),t.moveTo(e.center.x,e.center.y),t.lineTo(c,r),t.stroke()}t.strokeStyle="#000",t.lineWidth=2,t.beginPath(),t.moveTo(0,e.center.y),t.lineTo(e.canvas.width,e.center.y),t.moveTo(e.center.x,0),t.lineTo(e.center.x,e.canvas.height),t.stroke(),drawTicks(e,t),t.textAlign="left",t.textBaseline="middle";for(let a=0;a<e.ticks.length;a++){const n=e.center.y-e.ticks[a]*e.scale;Math.abs(e.ticks[a])<1e-6||t.fillText(e.labels[a],e.center.x+8,n)}t.restore()}function drawTicks(e,t){t.strokeStyle="#000",t.lineWidth=1.5,t.beginPath();for(let a=0;a<e.ticks.length;a++){const n=e.center.x+e.ticks[a]*e.scale;t.moveTo(n,e.center.y-5),t.lineTo(n,e.center.y+5);const s=e.center.y-e.ticks[a]*e.scale;t.moveTo(e.center.x-5,s),t.lineTo(e.center.x+5,s)}t.stroke(),t.fillStyle="black",t.font="12px Arial",t.textAlign="center",t.textBaseline="top";for(let a=0;a<e.ticks.length;a++){const n=e.center.x+e.ticks[a]*e.scale;Math.abs(e.ticks[a])<1e-6||t.fillText(e.labels[a],n,e.center.y+8)}t.textAlign="left",t.textBaseline="middle";for(let a=0;a<e.ticks.length;a++){const n=e.center.y-e.ticks[a]*e.scale;Math.abs(e.ticks[a])<1e-6||t.fillText(e.labels[a],e.center.x+8,n)}}function drawPoint(e,t,a){const n=e.toCanvasCoords(t),s=e.ctx;s.beginPath(),s.arc(n.x,n.y,radius,0,2*Math.PI),s.fillStyle=a,s.fill()}function expMap(e){const t=Math.exp(e.x);return{x:t*Math.cos(e.y),y:t*Math.sin(e.y)}}function logMap(e){const t=Math.sqrt(e.x**2+e.y**2),a=Math.atan2(e.y,e.x);return{x:Math.log(t),y:a}}function redraw(){Object.values(canvasParams).forEach(e=>resizeCanvas(e)),drawGrid(canvasParams.canvas1),"polar"===canvasParams.canvas2.gridMode?drawPolarGrid(canvasParams.canvas2):drawGrid(canvasParams.canvas2),drawPoint(canvasParams.canvas1,z,"red"),drawPoint(canvasParams.canvas2,expMap(z),"blue")}function isInsidePoint(e,t,a){const n=e.toCanvasCoords(t()),s=a.x-n.x,c=a.y-n.y;return s*s+c*c<=radius*radius}function setupDragging(e,t,a){function n(e){const t=s.getBoundingClientRect();return{x:e.clientX-t.left,y:e.clientY-t.top}}const s=e.canvas;let c=!1;s.addEventListener("mousedown",a=>{const s=n(a);isInsidePoint(e,t,s)&&(c=!0)}),s.addEventListener("mousemove",t=>{if(!c)return;const s=n(t),r=e.fromCanvasCoords(s);a(r),redraw()}),s.addEventListener("mouseup",()=>c=!1),s.addEventListener("mouseleave",()=>c=!1),s.addEventListener("touchstart",a=>{const s=n(a.touches[0]);isInsidePoint(e,t,s)&&(c=!0)}),s.addEventListener("touchmove",t=>{if(!c)return;const s=n(t.touches[0]),r=e.fromCanvasCoords(s);a(r),redraw()}),s.addEventListener("touchend",()=>c=!1)}const canvas1=document.getElementById("canvas1"),canvas2=document.getElementById("canvas2"),radius=8.5,canvasParams={canvas1:{canvas:canvas1,ctx:canvas1.getContext("2d"),ticks:[-2*Math.PI,-Math.PI,0,Math.PI,2*Math.PI],labels:["-2\u03c0","-\u03c0","0","\u03c0","2\u03c0"],center:{x:0,y:0},toCanvasCoords:null,fromCanvasCoords:null,logicalWidth:4.2*Math.PI},canvas2:{canvas:canvas2,ctx:canvas2.getContext("2d"),ticks:[-15,-12,-9,-6,-3,0,3,6,9,12,15],labels:[-15,-12,-9,-6,-3,0,3,6,9,12,15].map(e=>e.toString()),center:{x:0,y:0},toCanvasCoords:null,fromCanvasCoords:null,gridMode:"cartesian",logicalWidth:33}};let z={x:1,y:1};setupDragging(canvasParams.canvas1,()=>z,e=>z=e),setupDragging(canvasParams.canvas2,()=>expMap(z),e=>z=logMap(e)),window.addEventListener("resize",redraw),document.querySelectorAll('input[name="gridMode"]').forEach(e=>{e.addEventListener("change",e=>{canvasParams.canvas2.gridMode=e.target.value,redraw()})}),redraw();